generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String           @id @default(uuid())
  email           String           @unique
  username        String           @unique
  createdAt       DateTime         @default(now())
  profilePicture  String
  password        String?
  phoneNumber     String?          @unique
  firstName       String
  lastName        String
  RefreshToken    RefreshToken[]
  Comment         Comment[]
  CommentLikes    CommentLikes[]
  ServiceProvider ServiceProvider?
  PostLike        PostLike[]
  Customer        Customer?
}

model RefreshToken {
  id        String   @id @default(uuid())
  userId    String
  token     String   @unique
  createdAt DateTime @default(now())
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id])
}

model Service {
  id                   String   @id @default(uuid())
  service_name         String
  location_id          String
description  String
  service_type_id      String
  service_price        String
availibility DateTime
license      String
images       String
  provider_id          String
  menu_id              String

Images ServiceImages[]
  menu          Menu            @relation(fields: [menu_id], references: [menu_id])
}

model ServiceProvider {
id      String @id @default(uuid())
  user_id          String @unique
 name    String
 email   String
contact String
rating  Int
location_id      String
  user     User     @relation(fields: [user_id], references: [id])
  location Location @relation(fields: [location_id], references: [id])
}

model Location {
  id      String @id @default(uuid())
  address String
city    String
zip     Int
 country String
state   String

  ServiceProvider ServiceProvider[]
  Orders          Orders[]
}

model Orders {
id          String @id @default(uuid())
description String
price       String
 list        String
status      String
  location_id       String
  customer_id       String

  location Location @relation(fields: [location_id], references: [id])
  customer Customer @relation(fields: [customer_id], references: [customer_id])
}

model Post {
  id           String     @id @default(uuid())
content String
  creation_date    DateTime
  user_id      String
  post_status  String
  caption      String?
  post_privacy String
  Comment      Comment[]
  PostLike     PostLike[]
}

model Customer {
  customer_id String @id @default(uuid())
  user_id     String @unique
  payment_id  String

  user    User     @relation(fields: [user_id], references: [id])
  payment Payment  @relation(fields: [payment_id], references: [id])
  Orders  Orders[]
}

model Payment {
id         String   @id @default(uuid())
numbers    Int
expiration DateTime
CVV        Int
  Customer Customer[]
}

model ServiceTypes {
  id String      @id @default(uuid())
  service_name    String
  promotion       Promotions?
}

model ServiceImages {
id  String @id @default(uuid())
image_url String
  service_id        String

  service Service @relation(fields: [service_id], references: [id])
}

model Promotions {
id          String       @id @default(uuid())
percent     Int
description String
  service_type_id       String       @unique
  serviceType           ServiceTypes @relation(fields: [service_type_id], references: [id])
}

model Menu {
  menu_id    String    @id @default(uuid())
  menu_item  String
  menu_price String
  Service    Service[]
}

model Comment {
  id           String @id @default(uuid())
  post_id      String
  post_content String
  user_id      String
  post_status  String
  caption      String
  post_privacy String

  post         Post           @relation(fields: [post_id], references: [id])
  user         User           @relation(fields: [user_id], references: [id])
  CommentLikes CommentLikes[]
}

model CommentLikes {
  id         String @id @default(uuid())
  comment_id String
  user_id    String
  comment Comment @relation(fields: [comment_id], references: [id])
  user    User    @relation(fields: [user_id], references: [id])
}

model PostLike {
  id      String @id @default(uuid())
  post_id String
  user_id String

  user User @relation(fields: [user_id], references: [id])
  post Post @relation(fields: [post_id], references: [id])
}
